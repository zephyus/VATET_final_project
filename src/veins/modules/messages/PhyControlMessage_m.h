//
// Generated file, do not edit! Created by opp_msgtool 6.0 from veins/modules/messages/PhyControlMessage.msg.
//

#ifndef __VEINS_PHYCONTROLMESSAGE_M_H
#define __VEINS_PHYCONTROLMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class PhyControlMessage;

}  // namespace veins


namespace veins {

/**
 * Class generated from <tt>veins/modules/messages/PhyControlMessage.msg:29</tt> by opp_msgtool.
 * <pre>
 * //
 * // Defines a control message that can be associated with a MAC frame to set
 * // transmission power and datarate on a per packet basis
 * //
 * message PhyControlMessage
 * {
 *     //modulation and coding scheme to be used (see enum TxMCS in ConstsPhy.h)
 *     int mcs = -1;
 *     //transmission power to be used in mW
 *     double txPower_mW = -1;
 * }
 * </pre>
 */
class VEINS_API PhyControlMessage : public ::omnetpp::cMessage
{
  protected:
    int mcs = -1;
    double txPower_mW = -1;

  private:
    void copy(const PhyControlMessage& other);

  protected:
    bool operator==(const PhyControlMessage&) = delete;

  public:
    PhyControlMessage(const char *name=nullptr, short kind=0);
    PhyControlMessage(const PhyControlMessage& other);
    virtual ~PhyControlMessage();
    PhyControlMessage& operator=(const PhyControlMessage& other);
    virtual PhyControlMessage *dup() const override {return new PhyControlMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMcs() const;
    virtual void setMcs(int mcs);

    virtual double getTxPower_mW() const;
    virtual void setTxPower_mW(double txPower_mW);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PhyControlMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PhyControlMessage& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::PhyControlMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::PhyControlMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_PHYCONTROLMESSAGE_M_H

